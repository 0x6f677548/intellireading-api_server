---
services:

  #-------------------------------------------------------------------
  # api_proxy is a nginx server that serves as a proxy for api_server
  api_proxy:
    container_name: api_proxy
    image: api_proxy
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/api_proxy/Dockerfile
    depends_on:
      - api_server
      - otel_collector
    volumes:
      - ./.log/api_proxy:/var/log/nginx
      - ./docker/api_proxy/config/conf.d/:/etc/nginx/conf.d
      - ./docker/api_proxy/config/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/api_proxy/config/cloudflare_ips.conf:/etc/nginx/cloudflare_ips.conf
    ports:
      - 80:80
    networks:
      - frontend_network
      - backend_network

  #-------------------------------------------------------------------
  # api_server is a nginx unit server that serves as a proxy for fastapi in the 
  # same container
  api_server: 
    container_name: api_server
    image: api_server
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/api_server/Dockerfile
    depends_on:
      - otel_collector
    volumes:
      - ./.log/api_server:/var/log/unit

    environment:
      # used by api_server itself when booting and reading config
      - API_SERVER_CONFIG_FILE=${API_SERVER_CONFIG_FILE}

      # used by api_server to identify itself on logs, otel, etc.
      - API_SERVER_SERVICE_NAME=${API_SERVER_SERVICE_NAME}
      - API_SERVER_VERSION=${API_SERVER_VERSION}
      - API_SERVER_INSTANCE_ID=${API_SERVER_INSTANCE_ID}

      # used by api_server to validate incoming requests
      - API_SERVER_API_KEY=${API_SERVER_API_KEY}
      
      # used by api_server to enable/disable turnstile      
      - API_SERVER_TURNSTILE_ENABLED=${API_SERVER_TURNSTILE_ENABLED}
      - API_SERVER_TURNSTILE_SECRET_KEY=${API_SERVER_TURNSTILE_SECRET_KEY}

      # used by api_server to enable/disable opentelemetry
      - API_SERVER_OTEL_ENABLED=${API_SERVER_OTEL_ENABLED}
      - API_SERVER_OTEL_TRACING_ENABLED=${API_SERVER_OTEL_TRACING_ENABLED}
      - API_SERVER_OTEL_METRICS_ENABLED=${API_SERVER_OTEL_METRICS_ENABLED}
      # used by opentelemetry sdk to export traces and metrics
      - OTEL_EXPORTER_OTLP_ENDPOINT=${API_SERVER_OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_EXPORTER_OTLP_INSECURE=${API_SERVER_OTEL_EXPORTER_OTLP_INSECURE}
    networks:
      - backend_network


  #-------------------------------------------------------------------
  # otel_collector is a opentelemetry collector that receives traces 
  #   and metrics from api_server
  #   and sends them to:
  #     - dev: jaeger local container
  #     - prod: otlp collector in the cloud, like newrelic, datadog, etc.
  otel_collector:
    container_name: otel_collector
    #image: otel/opentelemetry-collector-contrib:latest
    image: otel_collector
    build:
      context: .
      dockerfile: ./docker/otel_collector/Dockerfile
    restart: unless-stopped

    volumes:
      - ./.log:/tmp/log    
      - ./docker/otel_collector/config/otel_collector.config.yaml:/etc/otel_collector.config.yaml
    #command: ["--config", "/etc/otel_collector.config.yaml", "--feature-gates", "-component.UseLocalHostAsDefaultHost"]
    
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_COLLECTOR_OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_EXPORTER_OTLP_API_KEY=${OTEL_COLLECTOR_OTEL_EXPORTER_OTLP_API_KEY}
      - OTEL_EXPORTER_OTLP_INSECURE=${OTEL_COLLECTOR_OTEL_EXPORTER_OTLP_INSECURE}
      - ENVIRONMENT=${ENVIRONMENT}
    networks:
      - backend_network

  
  #-------------------------------------------------------------------
  # jaeger is a jaeger all-in-one container that receives traces 
  # from otel_collector and serves as a UI for viewing traces
  #  it is only used in dev environment
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    profiles:
      - dev #jaeger should't go to production 
    networks:
      - backend_network


networks:
  frontend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.16.0.0/24"
          gateway: "172.16.0.254"
        - subnet: "2001:3984:3989::/64"
          gateway: "2001:3984:3989::fffe"        

  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.16.1.0/24"
          gateway: "172.16.1.254"
        - subnet: "2001:3984:3989:1::/64"
          gateway: "2001:3984:3989:1::fffe"

user  nginx;
worker_processes  auto;

error_log syslog:server=otel_collector:50514,facility=local1,tag=nginx warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    client_max_body_size 10M; # we receive large files, so we need to increase the body size
    client_body_buffer_size 128k;
	server_tokens off; # we don't want to expose the version of nginx

    #log_format  main  '$remote_addr $remote_user [$time_local] $host "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    log_format json_log escape=json '{"level":"info",'
									 '"service_name":"nginx.access",'
									 '"status":"$status",'
									 '"body_bytes_sent":$body_bytes_sent,'
									 '"content_type":"$content_type",'
									 '"host":"$host",'
									 '"query_string":"$query_string",'
									 '"remote_addr":"$remote_addr",'
									 '"http_x_real_ip":"$http_x_real_ip",'
									 '"http_x_forwarded_for":"$http_x_forwarded_for",'
									 '"client_port":"$remote_port",'
									 '"remote_user":"$remote_user",'
									 '"request":"$request",'
									 '"request_time":$request_time,'
									 '"request_id":"$request_id",'
									 '"request_length":$request_length,'
									 '"request_method":"$request_method",'
									 '"request_uri":"$request_uri",'
									 '"request_body":"$request_body",'
									 '"server_addr":"$server_addr",'
									 '"server_name":"$server_name",'
									 '"server_port":"$server_port",'
									 '"server_protocol":"$server_protocol",'
									 '"http_user_agent":"$http_user_agent",'
                                     '"http_referer":"$http_referer",'
									 '"time_local":"$time_local",'
									 '"time_iso":"$time_iso8601",'
									 '"url":"$scheme://$host$request_uri",'
									 '"uri":"$uri"}';                      

    #access_log  /var/log/nginx/nginx-access.log  main;
    access_log syslog:server=otel_collector:514,facility=local7,tag=nginx,severity=info json_log;    

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    proxy_ssl_session_reuse on;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Connection "";


	# check if the request is coming from cloudflare/local network
	geo $allowed_ip {
			default 0;
			127.0.0.1/32 2; # local network
			172.16.0.0/22 3; # front_end and back_end network
			include /etc/nginx/cloudflare_ips.conf; # cloudflare network, generated by cloudflare_ips.sh
	}


	############################################
	## rate limiting configuration
	## we have two rate limiting zones: trusted_zone and others
	# trusted_zone: this is for requests coming from cloudflare/local network
	# others: this is for requests coming from other networks
	# although this server should be only accessible from cloudflare/local network, 
	# we have this zone to prevent abuse in case cloudflare is bypassed
	# we also have a others zone in case this server becomes 
	# accessible from the internet (e.g. by mistake or by a misconfiguration)

	# Map to determine which rate limiting key to use
	map $allowed_ip $limit_key {
		0 $binary_remote_addr;
		1 "cloudflare";
		2 "internal";
		3 "internal";
		default $binary_remote_addr;
	}

	# Rate limiting zones
	limit_req_zone $limit_key zone=trusted_zone:10m rate=10r/s;
	limit_req_zone $binary_remote_addr zone=others:10m rate=1r/s;


	server {

		#this is the default server and there is nothing to do here. 
		#if a request reaches this server, we'll drop it with a 444 error. The caller is trying to reach
		#a server that is not configured in nginx and we don't want to give any additional information about the server
		#this is probably a bot trying to find vulnerabilities in the server.
		#
		#we profer this approach instead of "deny all" (or 403) because it's faster and caller wont' receive additional details
		#about the server. 
		listen 80;
		return 444;

		# this ensures that even bad requests are immediately closed 
		# without sending any headers or response to the caller
		error_page 400 =444 /444.html;
		location = /444.html {
			return 444;
		}
	
	}

    include /etc/nginx/conf.d/*.conf;
    
}


server {

    listen       80;
    server_name  localhost api.intellireading.com;
    proxy_intercept_errors on;


    # using the allowed_ip variable to check if the request is coming from cloudflare/local
    # this var is set by the geo module and using cloudflare_ips.conf
    if ($allowed_ip = 0) {
        #let's return a 444 error if the request is not coming from cloudflare/local network
        #this is to prevent direct access to the server
        #444 is a special nginx code that closes the connection without sending any headers
        return 444;
    }

    # this ensures that only GET, HEAD and POST requests are allowed
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 444;
    }

    location /metaguiding/ {
        proxy_pass http://api_server.api_upstream;  #old: http://azurewebapp.api_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        add_header X-Upstream-connect_time-main $upstream_connect_time;

        limit_req zone=trusted_zone burst=20 nodelay;
        limit_req zone=others burst=20 nodelay;
        limit_req_status 444;

    }

    # this is a catch all location that will return a 404 error for any other request
    # although this is not strictly necessary, this will avoid logging errors in nginx-error.log 
    # for requests that are not handled by this server
    # this is useful to avoid filling the logs with errors for 404 requests
    location / {
        return 404; 
    }

    error_page 404 /__404-error-page__.html;

    location = /__404-error-page__.html {
        internal;
        return 404 '<html><body>Hello there, $proxy_add_x_forwarded_for! Are you lost?</body></html>';
    }

    # this ensures that even bad requests are immediately closed 
    # without sending any headers or response to the caller
    error_page 400 =444 /444.html;
    location = /444.html {
        return 444;
    }


}

